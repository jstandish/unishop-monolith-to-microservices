{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Metadata": {},
	"Parameters": {
		"LatestAmiId": {
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Default": "/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base",
			"Description": "Use an AMI of your choosing, we recommend to use the latest available"
		}
	},
	"Resources": {
		"MonoToMicroVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"InstanceTenancy": "default",
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicro"
					}
				]
			}
		},
		"MonoToMicroIGW": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroIGW"
					}
				]
			}
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"InternetGatewayId": {
					"Ref": "MonoToMicroIGW"
				}
			}
		},
		"MonoToMicroSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"CidrBlock": "10.0.0.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroSubnet1"
					}
				]
			}
		},
		"MonoToMicroSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"CidrBlock": "10.0.1.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroSubnet2"
					}
				]
			}
		},
		"MonoToMicroPublicRoutTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroPublicRoutTable"
					}
				]
			}
		},
		"MonoToMicroPublicRout": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "MonoToMicroPublicRoutTable"
				},
				"GatewayId": {
					"Ref": "MonoToMicroIGW"
				},
				"DestinationCidrBlock": "0.0.0.0/0"
			}
		},
		"MonoToMicroPublicSubnetRoutTableAssoc1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "MonoToMicroPublicRoutTable"
				},
				"SubnetId": {
					"Ref": "MonoToMicroSubnet1"
				}
			}
		},
		"MonoToMicroPublicSubnetRoutTableAssoc2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "MonoToMicroPublicRoutTable"
				},
				"SubnetId": {
					"Ref": "MonoToMicroSubnet2"
				}
			}
		},
		"DBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open database for access",
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 1433,
						"ToPort": 1433,
						"SourceSecurityGroupId": {
							"Ref": "EC2SecurityGroup"
						}
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroDBSG"
					}
				]
			}
		},
		"DBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "MonoToMicroDBSubnetGroup",
				"SubnetIds": [
					{
						"Ref": "MonoToMicroSubnet1"
					},
					{
						"Ref": "MonoToMicroSubnet2"
					}
				]
			}
		},
		"EC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open App access",
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80,
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443,
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80,
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443,
						"CidrIp": "0.0.0.0/0"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroEC2SG"
					}
				]
			}
		},
		"EC2SecurityGroupDBRule": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"GroupId": {
					"Ref": "EC2SecurityGroup"
				},
				"IpProtocol": "tcp",
				"FromPort": 3306,
				"ToPort": 3306,
				"DestinationSecurityGroupId": {
					"Ref": "DBSecurityGroup"
				}
			}
		},
		"S3InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "S3Role"
					}
				]
			}
		},
		"S3Policy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "S3Policy",
				"PolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"s3:GetBucketLocation",
								"s3:GetObject",
								"s3:GetObjectAcl",
								"s3:PutObject",
								"s3:PutObjectAcl"
							],
							"Resource": [
								{
									"Fn::GetAtt": [
										"UIBucket",
										"Arn"
									]
								},
								{
									"Fn::GetAtt": [
										"AssetBucket",
										"Arn"
									]
								},
								{
									"Fn::Join": [
										"",
										[
											{
												"Fn::GetAtt": [
													"UIBucket",
													"Arn"
												]
											},
											"/*"
										]
									]
								},
								{
									"Fn::Join": [
										"",
										[
											{
												"Fn::GetAtt": [
													"AssetBucket",
													"Arn"
												]
											},
											"/*"
										]
									]
								}
							]
						}
					]
				},
				"Roles": [
					{
						"Ref": "S3Role"
					}
				]
			}
		},
		"S3Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/"
			}
		},
		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"DeletionPolicy": "Delete",
			"Properties": {
				"DBName": "MonoToMicroDB",
				"DBInstanceIdentifier": "MonoToMicroDB",
				"Engine": "sqlserver-ex",
				"DBInstanceClass": "db.t2.micro",
				"Port": "1433",
				"MasterUsername": "MonoToMicroUser",
				"MasterUserPassword": "MonoToMicroPassword",
				"VPCSecurityGroups": [
					{
						"Ref": "DBSecurityGroup"
					}
				],
				"AllocatedStorage": "5",
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				},
				"MultiAZ": "false",
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroDB"
					}
				]
			}
		},
		"UIBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"WebsiteConfiguration": {
					"ErrorDocument": "error.html",
					"IndexDocument": "index.html"
				}
			}
		},
		"AssetBucket": {
			"Type": "AWS::S3::Bucket"
		},
		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "DBInstance",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": 1,
					"Timeout": "PT30M"
				}
			},
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"files": {
							"c:\\cfn\\configure-hosting.ps1": {
								"source": "https://raw.githubusercontent.com/jstandish/unishop-monolith-to-microservices/master/dotnet/MonoToMicroAssets/configure-hosting.ps1"
							},
							"c:\\cfn\\deploy-database.ps1": {
								"source": "https://raw.githubusercontent.com/jstandish/unishop-monolith-to-microservices/master/dotnet/MonoToMicroAssets/deploy-database.ps1"
							},
							"c:\\cfn\\deploy-website.ps1": {
								"source": "https://raw.githubusercontent.com/jstandish/unishop-monolith-to-microservices/master/dotnet/MonoToMicroAssets/deploy-website.ps1"
							},
							"c:\\cfn\\cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=",
											{
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							}
						}
					},
					"commands": {
						"1-install-website": {
							"Fn::Join": [
								"",
								"ps1 c:\\cfn\\configure-hosting.ps1"
							]
						},
						"2-deploy-database": {
							"Fn::Join": [
								"",
								"ps1 c:\\cfn\\deploy-database.ps1",
								"--database ",
								{
									"Fn::GetAtt": [
										"DBInstance",
										"Endpoint.Address"
									]
								}
							]
						},
						"3-deploy-website": {
							"Fn::Join": [
								"",
								"ps1 c:\\cfn\\deploy-website.ps1"
							]
						}
					}
				}
			},
			"Properties": {
				"InstanceType": "t2.micro",
				"ImageId": {
					"Ref": "LatestAmiId"
				},
				"SubnetId": {
					"Ref": "MonoToMicroSubnet1"
				},
				"SecurityGroupIds": [
					{
						"Ref": "EC2SecurityGroup"
					}
				],
				"IamInstanceProfile": {
					"Ref": "S3InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"$MONO_TO_MICRO_DB_ENDPOINT=",
								{
									"Fn::GetAtt": [
										"DBInstance",
										"Endpoint.Address"
									]
								},
								"\n",
								"$AWS_DEFAULT_REGION=",
								{
									"Ref": "AWS::Region"
								},
								";",
								"$UI_RANDOM_NAME=",
								{
									"Ref": "UIBucket"
								},
								";",
								"$ASSETS_RANDOM_NAME=",
								{
									"Ref": "AssetBucket"
								},
								";",
								"aws s3 cp /home/ec2-user/MonoToMicro/MonoToMicroUI s3://$UI_RANDOM_NAME/ --recursive --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers\n",
								"aws s3 cp /home/ec2-user/MonoToMicro/MonoToMicroLambda/build/libs s3://$ASSETS_RANDOM_NAME/ --recursive --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers\n",
								"cfn-signal.exe -e $?",
								" --stack ",
								{
									"Ref": "AWS::StackName"
								},
								" --resource EC2Instance",
								" --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "MonoToMicroEC2"
					}
				]
			}
		}
	},
	"Outputs": {
		"PublicDns": {
			"Value": {
				"Fn::Join": [
					"/",
					[
						"http:/",
						{
							"Fn::GetAtt": [
								"EC2Instance",
								"PublicDnsName"
							]
						}
					]
				]
			},
			"Description": "Server Public DNS"
		},
		"AssetBucket": {
			"Value": {
				"Ref": "AssetBucket"
			},
			"Description": "S3 Bucket containing the compiled Lambda function"
		},
		"UIBucket": {
			"Value": {
				"Ref": "UIBucket"
			},
			"Description": "S3 Bucket containing the UniShop website"
		}
	}
}